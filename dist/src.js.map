{
  "version": 3,
  "sources": ["../src/spotify.ts", "../src/index.ts"],
  "sourcesContent": ["import axios from \"axios\"\r\nimport { randomUUID } from \"crypto\"\r\nimport fs from \"fs\"\r\nimport * as EmailJS from \"@emailjs/browser\"\r\n\r\nvar TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\r\n    process.env.USERPROFILE) + '/.credentials/';\r\nvar TOKEN_PATH = TOKEN_DIR + 'spotify_access_token.json';\r\n\r\ninterface ISong {\r\n    title: string,\r\n    artist: string,\r\n    image: string,\r\n    id: string,\r\n    date: number,\r\n    spotifyLink: string,\r\n    previewLink: string,\r\n    href: string,\r\n}\r\n\r\nfunction saveDataToSystem(data: any) {\r\n    try {\r\n        fs.mkdirSync(TOKEN_DIR);\r\n    } catch (err) {\r\n        if (err.code != 'EEXIST') {\r\n            throw err;\r\n        }\r\n    }\r\n    fs.writeFile(TOKEN_PATH, JSON.stringify(data), (err) => {\r\n        if (err) throw err;\r\n        console.log('Token stored to ' + TOKEN_PATH);\r\n    });\r\n}\r\n\r\nfunction readAccessToken(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        // Check if we have previously stored a token.\r\n        fs.readFile(TOKEN_PATH, async function (err, token) {\r\n            if (err) {\r\n                let token_data = await requestAccessToken();\r\n                resolve(token_data)\r\n            } else {\r\n                let token_data = JSON.parse(token as any);\r\n                resolve(token_data)\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nasync function requestAccessToken() {\r\n    let url = \"https://accounts.spotify.com/api/token\"\r\n    let res = await axios.post(url, {\r\n        client_id: \"d16860988beb42ccaabc4b1c3709c15a\",\r\n        client_secret: \"d66c2867fe754ebd8870f2e8bc31b42f\",\r\n        grant_type: \"client_credentials\"\r\n    }, {\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }\r\n    })\r\n    saveDataToSystem(res.data)\r\n    return res.data\r\n}\r\n\r\nexport async function searchWithSpotify(value: string) {\r\n    return new Promise(async (resolve, reject) => {\r\n        value = encodeURIComponent(value)\r\n        let access_data = await readAccessToken()\r\n        console.log(value)\r\n        let url = `https://api.spotify.com/v1/search?q=${value}&type=track`\r\n        axios.get(url, {\r\n            headers: {\r\n                Authorization: `Bearer ${access_data.access_token}`\r\n            }\r\n        }).then(async (res) => {  \r\n            console.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\r\n            console.log(res)\r\n            console.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\")\r\n            if (res.status === 401) {\r\n                console.log(\"Access Token Expired\");\r\n                console.log(\"Requesting new access token\")\r\n                await requestAccessToken();\r\n                resolve([])\r\n                return\r\n            }\r\n\r\n            let tracks = res.data.tracks.items\r\n            let songs: ISong[] = []\r\n            for (let track of tracks) {\r\n                let artists = track.artists.map((a) => {\r\n                    return a.name\r\n                })\r\n                let s: ISong = {\r\n                    title: track.name,\r\n                    artist: artists.toLocaleString().replaceAll(\",\", \", \"),\r\n                    id: randomUUID(),\r\n                    image: track.album.images[0].url,\r\n                    date: Date.now(),\r\n                    href: track.href,\r\n                    previewLink: track.preview_url,\r\n                    spotifyLink: track.uri\r\n                }\r\n                songs.push(s)\r\n            }\r\n            resolve(songs)\r\n\r\n        }, (err)=>{ \r\n        }).catch(async (e) => { \r\n            if (e.status.toString() === \"401\") {\r\n                console.log(\"Access Token Expired\");\r\n                console.log(\"Requesting new access token\")\r\n                await requestAccessToken();\r\n                resolve([])\r\n                return\r\n            }\r\n            if (e.status === \"429\") {\r\n                console.log(\"The app has exceeded its rate limits.\")\r\n                // send mail to notify me of expiry event\r\n\r\n                EmailJS.send(\"song_begger_mail_service\", \"song_beggar_contact\", {\r\n                    email: \"songbeggar@server.com\", username: \"Song Beggar Server\", message: e.toString()\r\n                }).then((res) => {\r\n                    console.log(\"light\", \"Operation Successful, \" + res.text)\r\n                }, (error) => {\r\n                    console.log(\"danger\", \"Operation Failed \\n \" + error.text)\r\n                }).catch(err => {\r\n                    console.log(\"danger\", \"Operation Failed\")\r\n                    console.log(err)\r\n                })\r\n\r\n                // create an error song or the user to see\r\n                let errorSong: ISong = {\r\n                    title: \"Error\",\r\n                    artist: e.message,\r\n                    id: randomUUID(),\r\n                    image: \"\",\r\n                    date: Date.now(),\r\n                    href: \"\",\r\n                    previewLink: \"\",\r\n                    spotifyLink: \"\"\r\n                }\r\n                resolve([errorSong])\r\n                return\r\n            }\r\n            console.log(\"An Error Occurred\") \r\n            console.log(\"Requesting new access token\") \r\n            await requestAccessToken();\r\n            resolve([])\r\n            return\r\n        })\r\n    })\r\n}\r\n", "import { initializeYouTubeAPI, searchYouTube } from \"./youtube\";\r\nimport { searchWithSpotify } from \"./spotify\";\r\nimport * as EmailJS from \"@emailjs/browser\"\r\n\r\nconst express = require(\"express\")\r\nconst firebase = require(\"firebase\");\r\nvar cors = require('cors')\r\nconst bodyParser = require(\"body-parser\")\r\nconst multer = require(\"multer\")\r\nlet upload = multer()\r\nrequire(\"firebase/firestore\");\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCyGJpuGlrzMjV0kIaMht4673xiKN9gEgs\",\r\n    authDomain: \"beggar-dc861.firebaseapp.com\",\r\n    projectId: \"beggar-dc861\",\r\n    storageBucket: \"beggar-dc861.appspot.com\",\r\n    messagingSenderId: \"146917155340\",\r\n    databaseURL: \"https://beggar-dc861-default-rtdb.firebaseio.com\",\r\n    appId: \"1:146917155340:web:8db9ca5043d55b666c0429\",\r\n    measurementId: \"G-G8ZZQQH572\"\r\n};\r\n\r\n// initialize the mailing system\r\nEmailJS.init(\"xhgni5tAASWOcxiAS\")\r\n\r\nconst f_app = firebase.initializeApp(firebaseConfig)\r\n \r\nasync function processSongRequest(req) {\r\n    // if (req.body.api == 'youtube'){\r\n    //     let res = await searchYouTube(req.body.keywords)\r\n    //     return res\r\n    // }\r\n    // if (req.body.api == 'spotify'){\r\n    //     let res = await searchWithSpotify(req.body.keywords)\r\n    //     return res\r\n    // }\r\n\r\n    let res = await searchWithSpotify(req.body.keywords)\r\n    return res\r\n}\r\n\r\n\r\nconst app = express()\r\nconst port = 3001\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(bodyParser.json())\r\napp.use(upload.array());\r\napp.use(cors())\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"Song Beggar\") \r\n}) \r\n\r\napp.post('/', (req, res) => {\r\n\r\n    if (req.body.keywords == \"\") {\r\n        res.send(false)\r\n    }\r\n\r\n    processSongRequest(req).then((results) => {\r\n        res.send(results)\r\n    }).catch((error) => {\r\n        res.send(error)\r\n    })\r\n})\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Song Beggar Server, Listening on ${port}`)\r\n})\r\n\r\n// authorize the api\r\n// initializeYouTubeAPI()"],
  "mappings": "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",
  "names": ["fs", "axios", "EmailJS"]
}
