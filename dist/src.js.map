{
  "version": 3,
  "sources": ["../src/youtube.ts", "../src/spotify.ts", "../src/index.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport fs from \"fs\"\r\nimport { google } from \"googleapis\";\r\nvar readline = require(\"readline\")\r\nvar OAuth2 = google.auth.OAuth2;\r\n\r\nexport const key = \"AIzaSyB56Pk4jkneU0rwShgZp6T0ItyWgPX_0CM\"\r\n\r\n// If modifying these scopes, delete your previously saved credentials\r\n// at ~/.credentials/youtube-nodejs-quickstart.json\r\nvar SCOPES = ['https://www.googleapis.com/auth/youtube.readonly'];\r\nvar TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\r\n    process.env.USERPROFILE) + '/.credentials/';\r\nexport var TOKEN_PATH = TOKEN_DIR + 'youtube-nodejs-quickstart.json';\r\n\r\n\r\n\r\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n *\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\r\nfunction authorize(credentials, ) {\r\n  var clientSecret = credentials.web.client_secret;\r\n  var clientId = credentials.web.client_id;\r\n  var redirectUrl = credentials.web.redirect_uris[0];\r\n  var oauth2Client = new OAuth2(clientId, clientSecret, redirectUrl);\r\n\r\n  // Check if we have previously stored a token.\r\n  fs.readFile(TOKEN_PATH, function(err, token) {\r\n    if (err) {\r\n      getNewToken(oauth2Client);\r\n    } else {\r\n      oauth2Client.credentials = JSON.parse(token as any);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n *\r\n * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback to call with the authorized\r\n *     client.\r\n */\r\nfunction getNewToken(oauth2Client) {\r\n  var authUrl = oauth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    scope: SCOPES\r\n  });\r\n  console.log('Authorize this app by visiting this url: ', authUrl);\r\n  var rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n  });\r\n  rl.question('Enter the code from that page here: ', function(code) {\r\n    rl.close();\r\n    oauth2Client.getToken(code, function(err, token) {\r\n      if (err) {\r\n        console.log('Error while trying to retrieve access token', err);\r\n        return;\r\n      }\r\n      oauth2Client.credentials = token;\r\n      storeToken(token); \r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Store token to disk be used in later program executions.\r\n *\r\n * @param {Object} token The token to store to disk.\r\n */\r\nfunction storeToken(token) {\r\n  try {\r\n    fs.mkdirSync(TOKEN_DIR);\r\n  } catch (err) {\r\n    if (err.code != 'EEXIST') {\r\n      throw err;\r\n    }\r\n  }\r\n  fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\r\n    if (err) throw err;\r\n    console.log('Token stored to ' + TOKEN_PATH);\r\n  });\r\n}\r\n   \r\nexport function initializeYouTubeAPI(){\r\n// Load client secrets from a local file.\r\nfs.readFile('./src/client_secret.json', function processClientSecrets(err, content) {\r\n    if (err) {\r\n      console.log('Error loading client secret file: ' + err);\r\n      return;\r\n    }\r\n    // Authorize a client with the loaded credentials, then call the YouTube API.\r\n    authorize(JSON.parse(content as any));\r\n  });\r\n}\r\n \r\nfunction getAccessToken(){\r\n    fs.readFile(TOKEN_PATH, (error, token)=>{\r\n        if (error){\r\n            throw Error(\"No access token at specified path\")\r\n        }else{\r\n            let data = JSON.parse(token as any)\r\n            let access_token = data.access_token\r\n            return access_token\r\n        }\r\n    }) \r\n}\r\n\r\nexport async function searchYouTube(value:string){\r\n    let access_token = \"ya29.a0AWY7Ckn0R8o_xZrTLGQStxOBsLNAhZc5uSRACwW27YYxQHw46zI-H_pMXEcXs_YVuPqXey2nqL_tk4_QwTisASlu84Z8xuRQYe7B07cKMCfCMj2iCXu0lD1No1MtGZt3tHuexMl3N4h_Y9F7LKkmy8473JKkaCgYKAXkSARASFQG1tDrpo0VXOOMRvKAhPD62ZYWFUQ0163\"\r\n    value = encodeURIComponent(value)\r\n    let url = `https://youtube.googleapis.com/youtube/v3/search?part=snippet&type=video&key=${key}&q=${value}`\r\n    let ytRes = await axios.get(url, {\r\n        headers:{\r\n            Accept:\"application/json\",\r\n            Authorization:`Bearer ${access_token}`\r\n        }\r\n    })\r\n    console.log(ytRes)\r\n    \r\n    return ytRes.data\r\n}", "import axios from \"axios\"\r\nimport { randomUUID } from \"crypto\"\r\nimport fs from \"fs\"\r\n\r\nvar TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\r\n    process.env.USERPROFILE) + '/.credentials/';\r\nvar TOKEN_PATH = TOKEN_DIR + 'spotify_access_token.json';\r\n\r\ninterface ISong {\r\n    title: string,\r\n    artist: string,\r\n    image: string,\r\n    id: string\r\n}\r\n\r\nfunction saveDataToSystem(data: any) {\r\n    try {\r\n        fs.mkdirSync(TOKEN_DIR);\r\n    } catch (err) {\r\n        if (err.code != 'EEXIST') {\r\n            throw err;\r\n        }\r\n    }\r\n    fs.writeFile(TOKEN_PATH, JSON.stringify(data), (err) => {\r\n        if (err) throw err;\r\n        console.log('Token stored to ' + TOKEN_PATH);\r\n    });\r\n}\r\n\r\nfunction readAccessToken():Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        // Check if we have previously stored a token.\r\n        fs.readFile(TOKEN_PATH, async function (err, token) {\r\n            if (err) {\r\n                let token_data = await requestAccessToken();\r\n                resolve(token_data)\r\n            } else {\r\n                let token_data = JSON.parse(token as any);\r\n                resolve(token_data)\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nasync function requestAccessToken() {\r\n    let url = \"https://accounts.spotify.com/api/token\"\r\n    let res = await axios.post(url, {\r\n        client_id: \"d16860988beb42ccaabc4b1c3709c15a\",\r\n        client_secret: \"d66c2867fe754ebd8870f2e8bc31b42f\",\r\n        grant_type: \"client_credentials\"\r\n    }, {\r\n        headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }\r\n    })\r\n    saveDataToSystem(res.data)\r\n    return res.data\r\n}\r\n\r\nexport async function searchWithSpotify(value: string) { \r\n    return new Promise(async (resolve, reject)=>{ \r\n        value = encodeURIComponent(value)\r\n        let access_data = await readAccessToken()\r\n        console.log(value)\r\n        let url = `https://api.spotify.com/v1/search?q=${value}&type=track`\r\n        axios.get(url, {\r\n            headers: {\r\n                Authorization: `Bearer ${access_data.access_token}`\r\n            }\r\n        }).then(async (res)=>{\r\n            let tracks = res.data.tracks.items\r\n            let songs: ISong[] = []\r\n            for (let track of tracks) {\r\n                let artists = track.artists.map((a) => {\r\n                    return a.name\r\n                })\r\n                let s: ISong = {\r\n                    title: track.name,\r\n                    artist: artists.toLocaleString(),\r\n                    id: randomUUID(),\r\n                    image: track.album.images[0].url\r\n                }\r\n                songs.push(s)\r\n            }\r\n            resolve(songs)\r\n\r\n        }).catch(async (e)=>{\r\n            console.log(\"Error occcured. Requesting new access token\")\r\n            console.log(e)\r\n            await requestAccessToken() \r\n            reject(e)\r\n        })\r\n    })\r\n\r\n}\r\n", "import { request } from \"express\";\r\nimport axios from \"axios\"; \r\nimport { initializeYouTubeAPI, searchYouTube } from \"./youtube\";\r\nimport { searchWithSpotify } from \"./spotify\";\r\n\r\nconst express = require(\"express\")\r\nconst firebase = require(\"firebase\");\r\nvar cors = require('cors')\r\nconst bodyParser = require(\"body-parser\")\r\nconst multer = require(\"multer\")\r\nlet upload = multer()\r\nrequire(\"firebase/firestore\");\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCyGJpuGlrzMjV0kIaMht4673xiKN9gEgs\",\r\n    authDomain: \"beggar-dc861.firebaseapp.com\",\r\n    projectId: \"beggar-dc861\",\r\n    storageBucket: \"beggar-dc861.appspot.com\",\r\n    messagingSenderId: \"146917155340\",\r\n    databaseURL: \"https://beggar-dc861-default-rtdb.firebaseio.com\",\r\n    appId: \"1:146917155340:web:8db9ca5043d55b666c0429\",\r\n    measurementId: \"G-G8ZZQQH572\"\r\n};\r\n\r\nconst f_app = firebase.initializeApp(firebaseConfig)\r\nconst database = firebase.database(f_app)\r\nconst firestore = firebase.firestore(f_app)\r\n \r\nasync function processSongRequest(req) {\r\n    if (req.body.api == 'youtube'){\r\n        let res = await searchYouTube(req.body.keywords)\r\n        return res\r\n    }\r\n    if (req.body.api == 'spotify'){\r\n        let res = await searchWithSpotify(req.body.keywords)\r\n        return res\r\n    }\r\n}\r\n\r\n\r\nconst app = express()\r\nconst port = 3001\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(bodyParser.json())\r\napp.use(upload.array());\r\napp.use(cors())\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"Song Beggar\") \r\n}) \r\n\r\napp.post('/', (req, res) => {\r\n\r\n    if (req.body.keywords == \"\") {\r\n        res.send(false)\r\n    }\r\n\r\n    processSongRequest(req).then((results) => {\r\n        res.send(results)\r\n    }).catch((error) => {\r\n        res.send(error)\r\n    })\r\n})\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Song Beggar Server, Listening on ${port}`)\r\n})\r\n\r\n// authorize the api\r\n// initializeYouTubeAPI()"],
  "mappings": "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",
  "names": ["axios", "import_axios", "import_fs", "TOKEN_DIR", "TOKEN_PATH", "fs", "axios"]
}
